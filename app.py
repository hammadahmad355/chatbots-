# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EtF8E97hqZQHZTYuzrDioYcyfCUp9zEY
"""

# Step 1: Import Libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
import joblib

# Step 2: Load Dataset
df = pd.read_csv("health_queries.csv")  # Make sure this file exists
print("Sample data:")
print(df.head())

# Step 3: Preprocess & Split
X = df['query']
y = df['disease']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Vectorize Queries
vectorizer = TfidfVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Step 5: Train the Model
model = MultinomialNB()
model.fit(X_train_vec, y_train)

# Step 6: Evaluate
y_pred = model.predict(X_test_vec)
print("\nModel Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Step 7: Save Model and Vectorizer
joblib.dump(model, "chatbot_model.pkl")
joblib.dump(vectorizer, "vectorizer.pkl")

# Step 8: Create Disease-to-Advice Mapping
disease_to_advice = df.drop_duplicates('disease').set_index('disease')['advice'].to_dict()
joblib.dump(disease_to_advice, "disease_advice.pkl")

# Example usage (simulate chatbot response)
def get_chatbot_response(user_query):
    vec = vectorizer.transform([user_query])
    predicted_disease = model.predict(vec)[0]
    advice = disease_to_advice.get(predicted_disease, "No advice available.")
    return predicted_disease, advice

# Example Test
query = "I have a fever and cough"
predicted_disease, advice = get_chatbot_response(query)
print(f"\nUser Query: {query}")
print(f"Predicted Disease: {predicted_disease}")
print(f"Advice: {advice}")

# app.py

import streamlit as st
import joblib

# Load the model, vectorizer, and advice dictionary
model = joblib.load("chatbot_model.pkl")
vectorizer = joblib.load("vectorizer.pkl")
disease_to_advice = joblib.load("disease_advice.pkl")

# Streamlit app interface
st.title("ü©∫ Health Assistant Chatbot")
st.write("Enter your health symptoms or query. I will predict the possible disease and give advice.")

# Input box
user_query = st.text_input("üìù Type your health query here:")

# Predict and display
if st.button("Get Diagnosis"):
    if user_query.strip() == "":
        st.warning("Please enter a health query.")
    else:
        vec = vectorizer.transform([user_query])
        predicted_disease = model.predict(vec)[0]
        advice = disease_to_advice.get(predicted_disease, "No advice available.")

        st.success(f"üß¨ Predicted Disease: **{predicted_disease}**")
        st.info(f"üí° Advice: {advice}")

